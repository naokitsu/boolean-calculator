if (UseClangTidy)
    message("\n${Block} Trying to find clang-tidy")
    find_program(CLANGTIDY clang-tidy)
    if(CLANGTIDY)
        message("${SmallArrow} CLang-tidy has been found: ${CLANGTIDY}")
        set(CMAKE_CXX_CLANG_TIDY ${CLANGTIDY} -extra-arg=-Wno-unknown-warning-option)
    else()
        message("${ErrorSmallArrow} CLang-tidy hasn't been found, skip")
    endif()
endif()

if (UseCPPCheck)
    message("\n${Block} Trying to find cppcheck")
    find_program(CPPCHECK cppcheck)
    if(CPPCHECK)
        message("${SmallArrow} Cppcheck has been found: ${CPPCHECK}")
        set(CMAKE_CXX_CPPCHECK ${CPPCHECK} --suppress=missingInclude --enable=all
                --inline-suppr --inconclusive -i ${CMAKE_SOURCE_DIR}/imgui/lib)
    else()
        message("${ErrorSmallArrow} Cppcheck hasn't been found, skip")
    endif()
endif()

if (UseCCache)
    message("\n${Block} Trying to find ccache")
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        message("${SmallArrow} ccache has been found: ${CCACHE_FOUND}")
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    else()
        message("${ErrorSmallArrow} ccache hasn't been found, skip")
    endif()
endif()

if (UseIPO)
    message("\n${Block} Checking, is IPO supported")
    include(CheckIPOSupported)
    check_ipo_supported(RESULT result OUTPUT output)
    if(result)
        message("${SmallArrow} IPO is supported")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    else()
        message("${ErrorSmallArrow} IPO is not supported: ${output}")
    endif()
endif()
